name: ocelot.social publish branded CI

on:
  push:
    branches:
      - master
      - 1-flexible-footer-links

jobs:
  ##############################################################################
  # JOB: DOCKER BUILD COMMUNITY NEO4J ##########################################
  ##############################################################################
  build_branded_neo4j:
    name: Docker Build Branded - Neo4j Community
    runs-on: ubuntu-latest
    #needs: [nothing]
    steps:
      ##########################################################################
      # CHECKOUT CODE ##########################################################
      ##########################################################################
      - name: Checkout code
        uses: actions/checkout@v2
      ##########################################################################
      # SET ENVS ###############################################################
      ##########################################################################
      - name: ENV - VERSION
        run: echo "VERSION=$(node -p -e "require('./package.json').version")" >> $GITHUB_ENV
      - name: ENV - BUILD_DATE
        run: echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
      - name: ENV - OCELOT_DOCKER_VERSION_TAG
        run: echo "OCELOT_DOCKER_VERSION_TAG=$(node -p -e "require('./package.json').ocelotDockerVersionTag")" >> $GITHUB_ENV
      - name: ENV - DOCKER_ORGANISATION
        run: echo "DOCKER_ORGANISATION=$(node -p -e "require('./package.json').dockerOrganisation")" >> $GITHUB_ENV
      # this is oriented on the node docker version tag "node:12.19.0-alpine3.10" and looks like "app-branded:1.0.2-3-ocelot.social1.0.2-79"
      - name: ENV - BUILD_VERSION
        run: echo "BUILD_VERSION=${VERSION}-${GITHUB_RUN_NUMBER}-ocelot.social${OCELOT_DOCKER_VERSION_TAG}" >> $GITHUB_ENV
      - name: ENV - BUILD_COMMIT
        run: echo "BUILD_COMMIT=${GITHUB_SHA}" >> $GITHUB_ENV
      ##########################################################################
      # BUILD NEO4J DOCKER IMAGE (community-branded) ###########################
      ##########################################################################
      - name: Neo4j | Build `community-branded` image
        run: |
          docker build --target community-branded -t "${DOCKER_ORGANISATION}/neo4j-community-branded:latest" -t "${DOCKER_ORGANISATION}/neo4j-community-branded:${VERSION}" -t "${DOCKER_ORGANISATION}/neo4j-community-branded:${BUILD_VERSION}" -f docker/neo4j.Dockerfile --build-arg APP_IMAGE=ocelotsocialnetwork/neo4j:${OCELOT_DOCKER_VERSION_TAG} .
          docker save "${DOCKER_ORGANISATION}/neo4j-community-branded" > /tmp/neo4j-community-branded.tar
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: docker-neo4j-community-branded
          path: /tmp/neo4j-community-branded.tar

  ##############################################################################
  # JOB: DOCKER BUILD BRANDED BACKEND ##########################################
  ##############################################################################
  build_branded_backend:
    name: Docker Build Branded - Backend
    runs-on: ubuntu-latest
    #needs: [nothing]
    steps:
      ##########################################################################
      # CHECKOUT CODE ##########################################################
      ##########################################################################
      - name: Checkout code
        uses: actions/checkout@v2
      ##########################################################################
      # SET ENVS ###############################################################
      ##########################################################################
      - name: ENV - VERSION
        run: echo "VERSION=$(node -p -e "require('./package.json').version")" >> $GITHUB_ENV
      - name: ENV - BUILD_DATE
        run: echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
      - name: ENV - OCELOT_DOCKER_VERSION_TAG
        run: echo "OCELOT_DOCKER_VERSION_TAG=$(node -p -e "require('./package.json').ocelotDockerVersionTag")" >> $GITHUB_ENV
      - name: ENV - DOCKER_ORGANISATION
        run: echo "DOCKER_ORGANISATION=$(node -p -e "require('./package.json').dockerOrganisation")" >> $GITHUB_ENV
      # this is oriented on the node docker version tag "node:12.19.0-alpine3.10" and looks like "app-branded:1.0.2-3-ocelot.social1.0.2-79"
      - name: ENV - BUILD_VERSION
        run: echo "BUILD_VERSION=${VERSION}-${GITHUB_RUN_NUMBER}-ocelot.social${OCELOT_DOCKER_VERSION_TAG}" >> $GITHUB_ENV
      - name: ENV - BUILD_COMMIT
        run: echo "BUILD_COMMIT=${GITHUB_SHA}" >> $GITHUB_ENV
      ##########################################################################
      # BUILD BACKEND DOCKER IMAGE (branded) ################################
      ##########################################################################
      - name: backend | Build `branded` image
        run: |
          docker build --target branded -t "${DOCKER_ORGANISATION}/backend-branded:latest" -t "${DOCKER_ORGANISATION}/backend-branded:${VERSION}" -t "${DOCKER_ORGANISATION}/backend-branded:${BUILD_VERSION}" -f docker/backend.Dockerfile --build-arg APP_IMAGE=ocelotsocialnetwork/backend:${OCELOT_DOCKER_VERSION_TAG} .
          docker save "${DOCKER_ORGANISATION}/backend-branded" > /tmp/backend-branded.tar
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: docker-backend-branded
          path: /tmp/backend-branded.tar

  ##############################################################################
  # JOB: DOCKER BUILD BRANDED WEBAPP ###########################################
  ##############################################################################
  build_branded_webapp:
    name: Docker Build Branded - WebApp
    runs-on: ubuntu-latest
    #needs: [nothing]
    steps:
      ##########################################################################
      # CHECKOUT CODE ##########################################################
      ##########################################################################
      - name: Checkout code
        uses: actions/checkout@v2
      ##########################################################################
      # SET ENVS ###############################################################
      ##########################################################################
      - name: ENV - VERSION
        run: echo "VERSION=$(node -p -e "require('./package.json').version")" >> $GITHUB_ENV
      - name: ENV - BUILD_DATE
        run: echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
      - name: ENV - OCELOT_DOCKER_VERSION_TAG
        run: echo "OCELOT_DOCKER_VERSION_TAG=$(node -p -e "require('./package.json').ocelotDockerVersionTag")" >> $GITHUB_ENV
      - name: ENV - DOCKER_ORGANISATION
        run: echo "DOCKER_ORGANISATION=$(node -p -e "require('./package.json').dockerOrganisation")" >> $GITHUB_ENV
      # this is oriented on the node docker version tag "node:12.19.0-alpine3.10" and looks like "app-branded:1.0.2-3-ocelot.social1.0.2-79"
      - name: ENV - BUILD_VERSION
        run: echo "BUILD_VERSION=${VERSION}-${GITHUB_RUN_NUMBER}-ocelot.social${OCELOT_DOCKER_VERSION_TAG}" >> $GITHUB_ENV
      - name: ENV - BUILD_COMMIT
        run: echo "BUILD_COMMIT=${GITHUB_SHA}" >> $GITHUB_ENV
      ##########################################################################
      # BUILD WEBAPP DOCKER IMAGE (build) ######################################
      ##########################################################################
      - name: webapp | Build `branded` image
        run: |
          docker build --target branded -t "${DOCKER_ORGANISATION}/webapp-branded:latest" -t "${DOCKER_ORGANISATION}/webapp-branded:${VERSION}" -t "${DOCKER_ORGANISATION}/webapp-branded:${BUILD_VERSION}" -f docker/webapp.Dockerfile --build-arg APP_IMAGE=ocelotsocialnetwork/webapp:${OCELOT_DOCKER_VERSION_TAG} .
          docker save "${DOCKER_ORGANISATION}/webapp-branded" > /tmp/webapp-branded.tar
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: docker-webapp-branded
          path: /tmp/webapp-branded.tar

  ##############################################################################
  # JOB: DOCKER BUILD BRANDED MAINTENANCE ######################################
  ##############################################################################
  build_branded_maintenance:
    name: Docker Build Branded - Maintenance
    runs-on: ubuntu-latest
    #needs: [nothing]
    steps:
      ##########################################################################
      # CHECKOUT CODE ##########################################################
      ##########################################################################
      - name: Checkout code
        uses: actions/checkout@v2
      ##########################################################################
      # SET ENVS ###############################################################
      ##########################################################################
      - name: ENV - VERSION
        run: echo "VERSION=$(node -p -e "require('./package.json').version")" >> $GITHUB_ENV
      - name: ENV - BUILD_DATE
        run: echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
      - name: ENV - OCELOT_DOCKER_VERSION_TAG
        run: echo "OCELOT_DOCKER_VERSION_TAG=$(node -p -e "require('./package.json').ocelotDockerVersionTag")" >> $GITHUB_ENV
      - name: ENV - DOCKER_ORGANISATION
        run: echo "DOCKER_ORGANISATION=$(node -p -e "require('./package.json').dockerOrganisation")" >> $GITHUB_ENV
      # this is oriented on the node docker version tag "node:12.19.0-alpine3.10" and looks like "app-branded:1.0.2-3-ocelot.social1.0.2-79"
      - name: ENV - BUILD_VERSION
        run: echo "BUILD_VERSION=${VERSION}-${GITHUB_RUN_NUMBER}-ocelot.social${OCELOT_DOCKER_VERSION_TAG}" >> $GITHUB_ENV
      - name: ENV - BUILD_COMMIT
        run: echo "BUILD_COMMIT=${GITHUB_SHA}" >> $GITHUB_ENV
      ##########################################################################
      # BUILD MAINTENANCE DOCKER IMAGE (build) #################################
      ##########################################################################
      - name: maintenance | Build `branded` image
        run: |
          docker build --target branded -t "${DOCKER_ORGANISATION}/maintenance-branded:latest" -t "${DOCKER_ORGANISATION}/maintenance-branded:${VERSION}" -t "${DOCKER_ORGANISATION}/maintenance-branded:${BUILD_VERSION}" -f docker/maintenance.Dockerfile --build-arg APP_IMAGE=ocelotsocialnetwork/maintenance:${OCELOT_DOCKER_VERSION_TAG} .
          docker save "${DOCKER_ORGANISATION}/maintenance-branded" > /tmp/maintenance-branded.tar
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: docker-maintenance-branded
          path: /tmp/maintenance-branded.tar

  ##############################################################################
  # JOB: UPLOAD TO DOCKERHUB ###################################################
  ##############################################################################
  upload_to_dockerhub:
    name: Upload to Dockerhub
    runs-on: ubuntu-latest
    needs: [build_branded_neo4j,build_branded_backend,build_branded_webapp,build_branded_maintenance]
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      ##########################################################################
      # CHECKOUT CODE ##########################################################
      ##########################################################################
      - name: Checkout code
        uses: actions/checkout@v2
      ##########################################################################
      # SET ENVS ###############################################################
      ##########################################################################
      - name: ENV - VERSION
        run: echo "VERSION=$(node -p -e "require('./package.json').version")" >> $GITHUB_ENV
      - name: ENV - BUILD_DATE
        run: echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
      - name: ENV - OCELOT_DOCKER_VERSION_TAG
        run: echo "OCELOT_DOCKER_VERSION_TAG=$(node -p -e "require('./package.json').ocelotDockerVersionTag")" >> $GITHUB_ENV
      - name: ENV - DOCKER_ORGANISATION
        run: echo "DOCKER_ORGANISATION=$(node -p -e "require('./package.json').dockerOrganisation")" >> $GITHUB_ENV
      # this is oriented on the node docker version tag "node:12.19.0-alpine3.10" and looks like "app-branded:1.0.2-3-ocelot.social1.0.2-79"
      - name: ENV - BUILD_VERSION
        run: echo "BUILD_VERSION=${VERSION}-${GITHUB_RUN_NUMBER}-ocelot.social${OCELOT_DOCKER_VERSION_TAG}" >> $GITHUB_ENV
      - name: ENV - BUILD_COMMIT
        run: echo "BUILD_COMMIT=${GITHUB_SHA}" >> $GITHUB_ENV
      ##########################################################################
      # DOWNLOAD DOCKER IMAGES #################################################
      ##########################################################################
      # Neo4j Community
      - name: Download Docker Image (Neo4j Community)
        uses: actions/download-artifact@v2
        with:
          name: docker-neo4j-community-branded
          path: /tmp
      - name: Load Docker Image
        run: docker load < /tmp/neo4j-community-branded.tar
      # Backend
      - name: Download Docker Image (Backend)
        uses: actions/download-artifact@v2
        with:
          name: docker-backend-branded
          path: /tmp
      - name: Load Docker Image
        run: docker load < /tmp/backend-branded.tar
      # Webapp
      - name: Download Docker Image (Webapp)
        uses: actions/download-artifact@v2
        with:
          name: docker-webapp-branded
          path: /tmp
      - name: Load Docker Image
        run: docker load < /tmp/webapp-branded.tar
      # Maintenance
      - name: Download Docker Image (Maintenance)
        uses: actions/download-artifact@v2
        with:
          name: docker-maintenance-branded
          path: /tmp
      - name: Load Docker Image
        run: docker load < /tmp/maintenance-branded.tar
      ##########################################################################
      # Upload #################################################################
      ##########################################################################
      - name: login to dockerhub
        run: echo "${DOCKERHUB_TOKEN}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
      - name: Push Neo4j Community
        run: docker push --all-tags ${DOCKER_ORGANISATION}/neo4j-community-branded
      - name: Push Backend
        run: docker push --all-tags ${DOCKER_ORGANISATION}/backend-branded
      - name: Push Webapp
        run: docker push --all-tags ${DOCKER_ORGANISATION}/webapp-branded
      - name: Push Maintenance
        run: docker push --all-tags ${DOCKER_ORGANISATION}/maintenance-branded

  ##############################################################################
  # JOB: GITHUB TAG LATEST VERSION #############################################
  ##############################################################################
  github_tag:
    name: Tag latest version on Github
    runs-on: ubuntu-latest
    needs: [upload_to_dockerhub]
    steps:
      ##########################################################################
      # CHECKOUT CODE ##########################################################
      ##########################################################################
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Fetch full History for changelog
      ##########################################################################
      # SET ENVS ###############################################################
      ##########################################################################
      - name: ENV - VERSION
        run: echo "VERSION=$(node -p -e "require('./package.json').version")" >> $GITHUB_ENV
      - name: ENV - BUILD_DATE
        run: echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
      - name: ENV - OCELOT_DOCKER_VERSION_TAG
        run: echo "OCELOT_DOCKER_VERSION_TAG=$(node -p -e "require('./package.json').ocelotDockerVersionTag")" >> $GITHUB_ENV
      - name: ENV - DOCKER_ORGANISATION
        run: echo "DOCKER_ORGANISATION=$(node -p -e "require('./package.json').dockerOrganisation")" >> $GITHUB_ENV
      # this is oriented on the node docker version tag "node:12.19.0-alpine3.10" and looks like "app-branded:1.0.2-3-ocelot.social1.0.2-79"
      - name: ENV - BUILD_VERSION
        run: echo "BUILD_VERSION=${VERSION}-${GITHUB_RUN_NUMBER}-ocelot.social${OCELOT_DOCKER_VERSION_TAG}" >> $GITHUB_ENV
      - name: ENV - BUILD_COMMIT
        run: echo "BUILD_COMMIT=${GITHUB_SHA}" >> $GITHUB_ENV
      ##########################################################################
      # Push build tag to GitHub ###############################################
      ##########################################################################
      - name: package-version-to-git-tag + build number
        uses: pkgdeps/git-tag-action@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          github_repo: ${{ github.repository }}
          version: ${{ env.BUILD_VERSION }}
          git_commit_sha: ${{ github.sha }}
          git_tag_prefix: "b"
      ##########################################################################
      # Push release tag to GitHub #############################################
      ##########################################################################
      - name: package-version-to-git-release
        continue-on-error: true # Will fail if tag exists
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.VERSION }}
          release_name: ${{ env.VERSION }}
          #body_path: ./CHANGELOG.md
          draft: false
          prerelease: false